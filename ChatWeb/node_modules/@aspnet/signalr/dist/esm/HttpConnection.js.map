{"version":3,"file":"HttpConnection.js","sourceRoot":"","sources":["../../src/HttpConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { DataReceived, ConnectionClosed } from \"./Common\"\r\nimport { IConnection } from \"./IConnection\"\r\nimport { ITransport, TransferMode, TransportType, WebSocketTransport, ServerSentEventsTransport, LongPollingTransport } from \"./Transports\"\r\nimport { HttpClient, DefaultHttpClient } from \"./HttpClient\"\r\nimport { ILogger, LogLevel } from \"./ILogger\"\r\nimport { LoggerFactory } from \"./Loggers\"\r\n\r\nexport interface IHttpConnectionOptions {\r\n    httpClient?: HttpClient;\r\n    transport?: TransportType | ITransport;\r\n    logger?: ILogger | LogLevel;\r\n    accessTokenFactory?: () => string;\r\n}\r\n\r\nconst enum ConnectionState {\r\n    Connecting,\r\n    Connected,\r\n    Disconnected\r\n}\r\n\r\ninterface INegotiateResponse {\r\n    connectionId: string\r\n    availableTransports: string[]\r\n}\r\n\r\nexport class HttpConnection implements IConnection {\r\n    private connectionState: ConnectionState;\r\n    private baseUrl: string;\r\n    private url: string;\r\n    private readonly httpClient: HttpClient;\r\n    private readonly logger: ILogger;\r\n    private readonly options: IHttpConnectionOptions;\r\n    private transport: ITransport;\r\n    private connectionId: string;\r\n    private startPromise: Promise<void>;\r\n\r\n    readonly features: any = {};\r\n\r\n    constructor(url: string, options: IHttpConnectionOptions = {}) {\r\n        this.logger = LoggerFactory.createLogger(options.logger);\r\n        this.baseUrl = this.resolveUrl(url);\r\n\r\n        options = options || {};\r\n        options.accessTokenFactory = options.accessTokenFactory || (() => null);\r\n\r\n        this.httpClient = options.httpClient || new DefaultHttpClient();\r\n        this.connectionState = ConnectionState.Disconnected;\r\n        this.options = options;\r\n    }\r\n\r\n    async start(): Promise<void> {\r\n        if (this.connectionState !== ConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a connection that is not in the 'Disconnected' state.\"));\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Connecting;\r\n\r\n        this.startPromise = this.startInternal();\r\n        return this.startPromise;\r\n    }\r\n\r\n    private async startInternal(): Promise<void> {\r\n        try {\r\n            if (this.options.transport === TransportType.WebSockets) {\r\n                // No need to add a connection ID in this case\r\n                this.url = this.baseUrl;\r\n                this.transport = this.createTransport(this.options.transport, [TransportType[TransportType.WebSockets]]);\r\n            }\r\n            else {\r\n                let headers;\r\n                let token = this.options.accessTokenFactory();\r\n                if (token) {\r\n                    headers = new Map<string, string>();\r\n                    headers.set(\"Authorization\", `Bearer ${token}`);\r\n                }\r\n\r\n                let negotiatePayload = await this.httpClient.post(this.resolveNegotiateUrl(this.baseUrl), {\r\n                    content: \"\",\r\n                    headers\r\n                });\r\n\r\n                let negotiateResponse: INegotiateResponse = JSON.parse(<string>negotiatePayload.content);\r\n                this.connectionId = negotiateResponse.connectionId;\r\n\r\n                // the user tries to stop the the connection when it is being started\r\n                if (this.connectionState == ConnectionState.Disconnected) {\r\n                    return;\r\n                }\r\n\r\n                if (this.connectionId) {\r\n                    this.url = this.baseUrl + (this.baseUrl.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${this.connectionId}`;\r\n                    this.transport = this.createTransport(this.options.transport, negotiateResponse.availableTransports);\r\n                }\r\n            }\r\n\r\n            this.transport.onreceive = this.onreceive;\r\n            this.transport.onclose = e => this.stopConnection(true, e);\r\n\r\n            let requestedTransferMode =\r\n                this.features.transferMode === TransferMode.Binary\r\n                    ? TransferMode.Binary\r\n                    : TransferMode.Text;\r\n\r\n            this.features.transferMode = await this.transport.connect(this.url, requestedTransferMode, this);\r\n\r\n            // only change the state if we were connecting to not overwrite\r\n            // the state if the connection is already marked as Disconnected\r\n            this.changeState(ConnectionState.Connecting, ConnectionState.Connected);\r\n        }\r\n        catch (e) {\r\n            this.logger.log(LogLevel.Error, \"Failed to start the connection. \" + e);\r\n            this.connectionState = ConnectionState.Disconnected;\r\n            this.transport = null;\r\n            throw e;\r\n        };\r\n    }\r\n\r\n    private createTransport(transport: TransportType | ITransport, availableTransports: string[]): ITransport {\r\n        if ((transport === null || transport === undefined) && availableTransports.length > 0) {\r\n            transport = TransportType[availableTransports[0]];\r\n        }\r\n        if (transport === TransportType.WebSockets && availableTransports.indexOf(TransportType[transport]) >= 0) {\r\n            return new WebSocketTransport(this.options.accessTokenFactory, this.logger);\r\n        }\r\n        if (transport === TransportType.ServerSentEvents && availableTransports.indexOf(TransportType[transport]) >= 0) {\r\n            return new ServerSentEventsTransport(this.httpClient, this.options.accessTokenFactory, this.logger);\r\n        }\r\n        if (transport === TransportType.LongPolling && availableTransports.indexOf(TransportType[transport]) >= 0) {\r\n            return new LongPollingTransport(this.httpClient, this.options.accessTokenFactory, this.logger);\r\n        }\r\n\r\n        if (this.isITransport(transport)) {\r\n            return transport;\r\n        }\r\n\r\n        throw new Error(\"No available transports found.\");\r\n    }\r\n\r\n    private isITransport(transport: any): transport is ITransport {\r\n        return typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n\r\n    private changeState(from: ConnectionState, to: ConnectionState): Boolean {\r\n        if (this.connectionState == from) {\r\n            this.connectionState = to;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    send(data: any): Promise<void> {\r\n        if (this.connectionState != ConnectionState.Connected) {\r\n            throw new Error(\"Cannot send data if the connection is not in the 'Connected' State\");\r\n        }\r\n\r\n        return this.transport.send(data);\r\n    }\r\n\r\n    async stop(error?: Error): Promise<void> {\r\n        let previousState = this.connectionState;\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        try {\r\n            await this.startPromise;\r\n        }\r\n        catch (e) {\r\n            // this exception is returned to the user as a rejected Promise from the start method\r\n        }\r\n        this.stopConnection(/*raiseClosed*/ previousState == ConnectionState.Connected, error);\r\n    }\r\n\r\n    private stopConnection(raiseClosed: Boolean, error?: Error) {\r\n        if (this.transport) {\r\n            this.transport.stop();\r\n            this.transport = null;\r\n        }\r\n\r\n        if (error) {\r\n            this.logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        } else {\r\n            this.logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n\r\n        this.connectionState = ConnectionState.Disconnected;\r\n\r\n        if (raiseClosed && this.onclose) {\r\n            this.onclose(error);\r\n        }\r\n    }\r\n\r\n    private resolveUrl(url: string): string {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n\r\n        if (typeof window === 'undefined' || !window || !window.document) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n\r\n        let parser = window.document.createElement(\"a\");\r\n        parser.href = url;\r\n\r\n        let baseUrl = (!parser.protocol || parser.protocol === \":\")\r\n            ? `${window.document.location.protocol}//${(parser.host || window.document.location.host)}`\r\n            : `${parser.protocol}//${parser.host}`;\r\n\r\n        if (!url || url[0] != '/') {\r\n            url = '/' + url;\r\n        }\r\n\r\n        let normalizedUrl = baseUrl + url;\r\n        this.logger.log(LogLevel.Information, `Normalizing '${url}' to '${normalizedUrl}'`);\r\n        return normalizedUrl;\r\n    }\r\n\r\n    private resolveNegotiateUrl(url: string): string {\r\n        let index = url.indexOf(\"?\");\r\n        let negotiateUrl = url.substring(0, index === -1 ? url.length : index);\r\n        if (negotiateUrl[negotiateUrl.length - 1] !== \"/\") {\r\n            negotiateUrl += \"/\";\r\n        }\r\n        negotiateUrl += \"negotiate\";\r\n        negotiateUrl += index === -1 ? \"\" : url.substring(index);\r\n        return negotiateUrl;\r\n    }\r\n\r\n    onreceive: DataReceived;\r\n    onclose: ConnectionClosed;\r\n}\r\n"]}