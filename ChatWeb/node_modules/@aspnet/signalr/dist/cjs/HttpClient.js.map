{"version":3,"file":"HttpClient.js","sourceRoot":"","sources":["../../src/HttpClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { TimeoutError, HttpError } from \"./Errors\";\r\nimport { AbortSignal } from \"./AbortController\";\r\n\r\nexport interface HttpRequest {\r\n    method?: string,\r\n    url?: string,\r\n    content?: string | ArrayBuffer,\r\n    headers?: Map<string, string>,\r\n    responseType?: XMLHttpRequestResponseType,\r\n    abortSignal?: AbortSignal,\r\n    timeout?: number,\r\n}\r\n\r\nexport class HttpResponse {\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText: string,\r\n        public readonly content: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\nexport abstract class HttpClient {\r\n    get(url: string): Promise<HttpResponse>;\r\n    get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url: url,\r\n        });\r\n    }\r\n\r\n    post(url: string): Promise<HttpResponse>;\r\n    post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url: url,\r\n        });\r\n    }\r\n\r\n    abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\nexport class DefaultHttpClient extends HttpClient {\r\n    send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n\r\n            if (request.headers) {\r\n                request.headers.forEach((value, header) => xhr.setRequestHeader(header, value));\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText))\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            }\r\n\r\n            xhr.ontimeout = () => {\r\n                reject(new TimeoutError());\r\n            }\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"]}