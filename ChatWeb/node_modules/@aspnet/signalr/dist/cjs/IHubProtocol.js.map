{"version":3,"file":"IHubProtocol.js","sourceRoot":"","sources":["../../src/IHubProtocol.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nexport const enum MessageType {\r\n    Invocation = 1,\r\n    StreamItem = 2,\r\n    Completion = 3,\r\n    StreamInvocation = 4,\r\n    CancelInvocation = 5,\r\n    Ping = 6,\r\n}\r\n\r\nexport interface HubMessage {\r\n    readonly type: MessageType;\r\n}\r\n\r\nexport interface InvocationMessage extends HubMessage {\r\n    readonly invocationId?: string;\r\n    readonly target: string;\r\n    readonly arguments: Array<any>;\r\n}\r\n\r\nexport interface StreamInvocationMessage extends HubMessage {\r\n    readonly invocationId: string;\r\n    readonly target: string;\r\n    readonly arguments: Array<any>\r\n}\r\n\r\nexport interface ResultMessage extends HubMessage {\r\n    readonly invocationId: string;\r\n    readonly item?: any;\r\n}\r\n\r\nexport interface CompletionMessage extends HubMessage {\r\n    readonly invocationId: string;\r\n    readonly error?: string;\r\n    readonly result?: any;\r\n}\r\n\r\nexport interface NegotiationMessage {\r\n    readonly protocol: string;\r\n}\r\n\r\nexport interface CancelInvocation extends HubMessage {\r\n    readonly invocationId: string;\r\n}\r\n\r\nexport const enum ProtocolType {\r\n    Text = 1,\r\n    Binary\r\n}\r\n\r\nexport interface IHubProtocol {\r\n    readonly name: string;\r\n    readonly type: ProtocolType;\r\n    parseMessages(input: any): HubMessage[];\r\n    writeMessage(message: HubMessage): any;\r\n}\r\n"]}