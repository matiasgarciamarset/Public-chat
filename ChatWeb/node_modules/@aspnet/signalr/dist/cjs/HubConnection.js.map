{"version":3,"file":"HubConnection.js","sourceRoot":"","sources":["../../src/HubConnection.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { ConnectionClosed } from \"./Common\"\r\nimport { IConnection } from \"./IConnection\"\r\nimport { HttpConnection, IHttpConnectionOptions } from \"./HttpConnection\"\r\nimport { TransportType, TransferMode } from \"./Transports\"\r\nimport { Subject, Observable } from \"./Observable\"\r\nimport { IHubProtocol, ProtocolType, MessageType, HubMessage, CompletionMessage, ResultMessage, InvocationMessage, StreamInvocationMessage, NegotiationMessage, CancelInvocation } from \"./IHubProtocol\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\"\r\nimport { Base64EncodedHubProtocol } from \"./Base64EncodedHubProtocol\"\r\nimport { ILogger, LogLevel } from \"./ILogger\"\r\nimport { ConsoleLogger, NullLogger, LoggerFactory } from \"./Loggers\"\r\n\r\nexport { JsonHubProtocol }\r\n\r\nexport interface IHubConnectionOptions extends IHttpConnectionOptions {\r\n    protocol?: IHubProtocol;\r\n    timeoutInMilliseconds?: number;\r\n}\r\n\r\nconst DEFAULT_TIMEOUT_IN_MS: number = 30 * 1000;\r\n\r\nexport class HubConnection {\r\n    private readonly connection: IConnection;\r\n    private readonly logger: ILogger;\r\n    private protocol: IHubProtocol;\r\n    private callbacks: Map<string, (invocationEvent: HubMessage, error?: Error) => void>;\r\n    private methods: Map<string, ((...args: any[]) => void)[]>;\r\n    private id: number;\r\n    private closedCallbacks: ConnectionClosed[];\r\n    private timeoutHandle: NodeJS.Timer;\r\n    private timeoutInMilliseconds: number;\r\n\r\n    constructor(url: string, options?: IHubConnectionOptions);\r\n    constructor(connection: IConnection, options?: IHubConnectionOptions);\r\n    constructor(urlOrConnection: string | IConnection, options: IHubConnectionOptions = {}) {\r\n        options = options || {};\r\n\r\n        this.timeoutInMilliseconds = options.timeoutInMilliseconds || DEFAULT_TIMEOUT_IN_MS;\r\n\r\n        if (typeof urlOrConnection === \"string\") {\r\n            this.connection = new HttpConnection(urlOrConnection, options);\r\n        }\r\n        else {\r\n            this.connection = urlOrConnection;\r\n        }\r\n\r\n        this.logger = LoggerFactory.createLogger(options.logger);\r\n\r\n        this.protocol = options.protocol || new JsonHubProtocol();\r\n        this.connection.onreceive = (data: any) => this.processIncomingData(data);\r\n        this.connection.onclose = (error?: Error) => this.connectionClosed(error);\r\n\r\n        this.callbacks = new Map<string, (invocationEvent: HubMessage, error?: Error) => void>();\r\n        this.methods = new Map<string, ((...args: any[]) => void)[]>();\r\n        this.closedCallbacks = [];\r\n        this.id = 0;\r\n    }\r\n\r\n    private processIncomingData(data: any) {\r\n        if (this.timeoutHandle !== undefined) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n\r\n        // Parse the messages\r\n        let messages = this.protocol.parseMessages(data);\r\n\r\n        for (var i = 0; i < messages.length; ++i) {\r\n            var message = messages[i];\r\n\r\n            switch (message.type) {\r\n                case MessageType.Invocation:\r\n                    this.invokeClientMethod(<InvocationMessage>message);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                case MessageType.Completion:\r\n                    let callback = this.callbacks.get((<any>message).invocationId);\r\n                    if (callback != null) {\r\n                        if (message.type === MessageType.Completion) {\r\n                            this.callbacks.delete((<any>message).invocationId);\r\n                        }\r\n                        callback(message);\r\n                    }\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Don't care about pings\r\n                    break;\r\n                default:\r\n                    this.logger.log(LogLevel.Warning, \"Invalid message type: \" + data);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    private configureTimeout() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this.timeoutHandle = setTimeout(() => this.serverTimeout(), this.timeoutInMilliseconds);\r\n        }\r\n    }\r\n\r\n    private serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n\r\n    private invokeClientMethod(invocationMessage: InvocationMessage) {\r\n        let methods = this.methods.get(invocationMessage.target.toLowerCase());\r\n        if (methods) {\r\n            methods.forEach(m => m.apply(this, invocationMessage.arguments));\r\n            if (invocationMessage.invocationId) {\r\n                // This is not supported in v1. So we return an error to avoid blocking the server waiting for the response.\r\n                let message = \"Server requested a response, which is not supported in this version of the client.\"\r\n                this.logger.log(LogLevel.Error, message);\r\n                this.connection.stop(new Error(message))\r\n            }\r\n        }\r\n        else {\r\n            this.logger.log(LogLevel.Warning, `No client method with the name '${invocationMessage.target}' found.`);\r\n        }\r\n    }\r\n\r\n    private connectionClosed(error?: Error) {\r\n        this.callbacks.forEach(callback => {\r\n            callback(undefined, error ? error : new Error(\"Invocation canceled due to connection being closed.\"));\r\n        });\r\n        this.callbacks.clear();\r\n\r\n        this.closedCallbacks.forEach(c => c.apply(this, [error]));\r\n\r\n        this.cleanupTimeout();\r\n    }\r\n\r\n    async start(): Promise<void> {\r\n        let requestedTransferMode =\r\n            (this.protocol.type === ProtocolType.Binary)\r\n                ? TransferMode.Binary\r\n                : TransferMode.Text;\r\n\r\n        this.connection.features.transferMode = requestedTransferMode\r\n        await this.connection.start();\r\n        var actualTransferMode = this.connection.features.transferMode;\r\n\r\n        await this.connection.send(\r\n            TextMessageFormat.write(\r\n                JSON.stringify(<NegotiationMessage>{ protocol: this.protocol.name })));\r\n\r\n        this.logger.log(LogLevel.Information, `Using HubProtocol '${this.protocol.name}'.`);\r\n\r\n        if (requestedTransferMode === TransferMode.Binary && actualTransferMode === TransferMode.Text) {\r\n            this.protocol = new Base64EncodedHubProtocol(this.protocol);\r\n        }\r\n\r\n        this.configureTimeout();\r\n    }\r\n\r\n    stop(): Promise<void> {\r\n        this.cleanupTimeout();\r\n        return this.connection.stop();\r\n    }\r\n\r\n    stream<T>(methodName: string, ...args: any[]): Observable<T> {\r\n        let invocationDescriptor = this.createStreamInvocation(methodName, args);\r\n\r\n        let subject = new Subject<T>(() => {\r\n            let cancelInvocation: CancelInvocation = this.createCancelInvocation(invocationDescriptor.invocationId);\r\n            let message: any = this.protocol.writeMessage(cancelInvocation);\r\n\r\n            this.callbacks.delete(invocationDescriptor.invocationId);\r\n\r\n            return this.connection.send(message);\r\n        });\r\n\r\n        this.callbacks.set(invocationDescriptor.invocationId, (invocationEvent: HubMessage, error?: Error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n\r\n            if (invocationEvent.type === MessageType.Completion) {\r\n                let completionMessage = <CompletionMessage>invocationEvent;\r\n                if (completionMessage.error) {\r\n                    subject.error(new Error(completionMessage.error));\r\n                }\r\n                else {\r\n                    subject.complete();\r\n                }\r\n            }\r\n            else {\r\n                subject.next(<T>(<ResultMessage>invocationEvent).item);\r\n            }\r\n        });\r\n\r\n        let message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        this.connection.send(message)\r\n            .catch(e => {\r\n                subject.error(e);\r\n                this.callbacks.delete(invocationDescriptor.invocationId);\r\n            });\r\n\r\n        return subject;\r\n    }\r\n\r\n    send(methodName: string, ...args: any[]): Promise<void> {\r\n        let invocationDescriptor = this.createInvocation(methodName, args, true);\r\n\r\n        let message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n        return this.connection.send(message);\r\n    }\r\n\r\n    invoke(methodName: string, ...args: any[]): Promise<any> {\r\n        let invocationDescriptor = this.createInvocation(methodName, args, false);\r\n\r\n        let p = new Promise<any>((resolve, reject) => {\r\n            this.callbacks.set(invocationDescriptor.invocationId, (invocationEvent: HubMessage, error?: Error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    let completionMessage = <CompletionMessage>invocationEvent;\r\n                    if (completionMessage.error) {\r\n                        reject(new Error(completionMessage.error));\r\n                    }\r\n                    else {\r\n                        resolve(completionMessage.result);\r\n                    }\r\n                }\r\n                else {\r\n                    reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                }\r\n            });\r\n\r\n            let message = this.protocol.writeMessage(invocationDescriptor);\r\n\r\n            this.connection.send(message)\r\n                .catch(e => {\r\n                    reject(e);\r\n                    this.callbacks.delete(invocationDescriptor.invocationId);\r\n                });\r\n        });\r\n\r\n        return p;\r\n    }\r\n\r\n    on(methodName: string, method: (...args: any[]) => void) {\r\n        if (!methodName || !method) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        if (!this.methods.has(methodName)) {\r\n            this.methods.set(methodName, []);\r\n        }\r\n\r\n        this.methods.get(methodName).push(method);\r\n    }\r\n\r\n    off(methodName: string, method: (...args: any[]) => void) {\r\n        if (!methodName || !method) {\r\n            return;\r\n        }\r\n\r\n        methodName = methodName.toLowerCase();\r\n        let handlers = this.methods.get(methodName);\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        var removeIdx = handlers.indexOf(method);\r\n        if (removeIdx != -1) {\r\n            handlers.splice(removeIdx, 1);\r\n        }\r\n    }\r\n\r\n    onclose(callback: ConnectionClosed) {\r\n        if (callback) {\r\n            this.closedCallbacks.push(callback);\r\n        }\r\n    }\r\n\r\n    private cleanupTimeout(): void {\r\n        if (this.timeoutHandle) {\r\n            clearTimeout(this.timeoutHandle);\r\n        }\r\n    }\r\n\r\n    private createInvocation(methodName: string, args: any[], nonblocking: boolean): InvocationMessage {\r\n        if (nonblocking) {\r\n            return {\r\n                type: MessageType.Invocation,\r\n                target: methodName,\r\n                arguments: args,\r\n            };\r\n        }\r\n        else {\r\n            let id = this.id;\r\n            this.id++;\r\n\r\n            return {\r\n                type: MessageType.Invocation,\r\n                invocationId: id.toString(),\r\n                target: methodName,\r\n                arguments: args,\r\n            };\r\n        }\r\n    }\r\n\r\n    private createStreamInvocation(methodName: string, args: any[]): StreamInvocationMessage {\r\n        let id = this.id;\r\n        this.id++;\r\n\r\n        return {\r\n            type: MessageType.StreamInvocation,\r\n            invocationId: id.toString(),\r\n            target: methodName,\r\n            arguments: args,\r\n        };\r\n    }\r\n\r\n    private createCancelInvocation(id: string): CancelInvocation {\r\n        return {\r\n            type: MessageType.CancelInvocation,\r\n            invocationId: id,\r\n        };\r\n    }\r\n}\r\n"]}